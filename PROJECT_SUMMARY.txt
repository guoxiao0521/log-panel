=============================================
Log Panel - 项目实现总结
=============================================

项目概述
---------
一个用于嵌入式 Web 应用(如 UE4)的日志面板库,提供可拖拽、可最小化的浮动日志面板,
用于在无法打开开发者工具的环境中查看 console 输出。

核心功能
---------
✅ 拦截 console.log/warn/error/info/debug 输出
✅ 可拖拽的浮动面板
✅ 可最小化/最大化
✅ 带时间戳的日志记录(HH:mm:ss)
✅ 不同类型日志的颜色区分
✅ 支持对象和数组的格式化显示(JSON.stringify)
✅ 自动滚动到最新日志
✅ 清空日志功能
✅ 最大日志数量限制(默认 1000 条)

项目结构
---------
log-panel/
├── src/                    # 源代码
│   ├── index.js           # 主入口和 API
│   ├── logger.js          # 日志拦截器
│   ├── panel.js           # UI 面板
│   └── styles.css         # 样式文件
├── dist/                   # 构建输出(已生成)
│   ├── log-panel.umd.js   # UMD 格式(浏览器直接引入)
│   ├── log-panel.esm.js   # ES 模块格式
│   └── log-panel.js       # CommonJS 格式
├── examples/               # 使用示例
│   ├── basic-usage.html   # 基本使用示例
│   └── ue4-usage.html     # UE4 嵌入式应用示例
├── index.html             # 完整测试页面
├── package.json           # 项目配置
├── rollup.config.js       # 构建配置
├── serve.cjs              # 本地开发服务器
├── USAGE.txt              # 使用说明
└── .gitignore             # Git 忽略配置

技术栈
-------
- 原生 JavaScript (无框架依赖)
- Rollup (打包工具)
- PostCSS (CSS 处理)
- Terser (代码压缩)

NPM 脚本
---------
npm run build     - 构建项目(生成 dist 目录)
npm run dev       - 开发模式(监听文件变化自动构建)
npm run serve     - 启动本地开发服务器(http://localhost:3000)

使用方法
---------

1. 浏览器直接引入:
   <script src="dist/log-panel.umd.js"></script>
   <script>
     LogPanel.init({
       position: 'bottom-right',
       width: 400,
       height: 300
     });
   </script>

2. ES 模块:
   import LogPanel from 'log-panel';
   LogPanel.init();

3. CommonJS:
   const LogPanel = require('log-panel');
   LogPanel.init();

API 方法
---------
LogPanel.init(options)    - 初始化日志面板
  options:
    - position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'
    - width: 面板宽度(px),默认 400
    - height: 面板高度(px),默认 300
    - maxLogs: 最大日志数量,默认 1000

LogPanel.destroy()        - 销毁日志面板,恢复原始 console
LogPanel.clear()          - 清空所有日志
LogPanel.getLogs()        - 获取所有日志数组

核心实现
---------

1. logger.js - 日志拦截器
   - 保存原始 console 方法
   - 重写 console.log/warn/error/info/debug
   - 维护日志数组,记录类型、内容、时间戳
   - 事件监听器模式,通知面板更新

2. panel.js - UI 面板
   - 创建浮动 DOM 结构
   - 实现拖拽功能(鼠标事件监听)
   - 实现最小化/最大化切换
   - 渲染日志列表,按类型着色
   - HTML 转义防止 XSS

3. styles.css - 样式
   - 暗色主题(仿 VS Code)
   - 固定定位(z-index: 9999)
   - 日志类型颜色:
     * log/info/debug: 青色边框
     * warn: 黄色边框,黄色背景
     * error: 红色边框,红色背景
   - 自定义滚动条样式

4. index.js - 主入口
   - 单例模式
   - 导出统一的 API
   - 同时支持 UMD 和 ES 模块

构建输出
---------
✅ dist/log-panel.umd.js    - 已压缩,约 27KB
✅ dist/log-panel.esm.js    - 已压缩,约 27KB  
✅ dist/log-panel.js        - 已压缩,约 27KB

测试方式
---------
1. 启动服务器:
   npm run serve

2. 访问测试页面:
   http://localhost:3000/

3. 测试示例:
   http://localhost:3000/examples/basic-usage.html
   http://localhost:3000/examples/ue4-usage.html

特性亮点
---------
✨ 零依赖运行时
✨ 轻量级(压缩后约 27KB)
✨ 完全不影响原始 console 功能
✨ 自动限制日志数量,防止内存泄漏
✨ 支持拖拽和边界检测
✨ 响应式设计,移动端友好
✨ 支持多种模块格式(UMD/ES/CJS)

适用场景
---------
✓ UE4 嵌入式 Web 应用
✓ Electron 应用调试
✓ 移动端 WebView 调试
✓ 任何无法打开开发者工具的环境
✓ 生产环境错误监控

注意事项
---------
- 库会拦截所有 console 方法,但不影响原始功能
- 面板使用 z-index: 9999,确保显示在最上层
- 建议在生产环境中根据需要动态加载
- 支持对象和数组,但会转换为 JSON 字符串显示

后续优化建议
-------------
□ 添加日志过滤功能(按类型、关键字)
□ 添加日志搜索功能
□ 添加日志导出功能(JSON/TXT)
□ 添加网络请求拦截
□ 添加性能监控面板
□ 支持自定义主题
□ 支持快捷键操作

项目状态
---------
✅ 已完成核心功能开发
✅ 已完成构建配置
✅ 已生成构建输出
✅ 已创建测试页面
✅ 已创建使用示例
✅ 项目可立即使用

联系方式
---------
如需帮助或反馈,请查看 USAGE.txt 或项目源代码。

